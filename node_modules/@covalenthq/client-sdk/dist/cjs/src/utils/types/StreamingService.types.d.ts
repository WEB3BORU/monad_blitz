import type { ContractMetadata } from "./Generic.types";
/**
 * Common enums and types for Streaming API
 */
export declare enum StreamingChain {
    BASE_MAINNET = "BASE_MAINNET",
    ETH_MAINNET = "ETH_MAINNET",
    BSC_MAINNET = "BSC_MAINNET"
}
export declare enum StreamingInterval {
    FIFTEEN_SECONDS = "FIFTEEN_SECONDS",
    THIRTY_SECONDS = "THIRTY_SECONDS",
    ONE_MINUTE = "ONE_MINUTE",
    FIVE_MINUTES = "FIVE_MINUTES",
    FIFTEEN_MINUTES = "FIFTEEN_MINUTES",
    THIRTY_MINUTES = "THIRTY_MINUTES",
    ONE_HOUR = "ONE_HOUR",
    FOUR_HOURS = "FOUR_HOURS",
    ONE_DAY = "ONE_DAY"
}
export declare enum StreamingTimeframe {
    ONE_MINUTE = "ONE_MINUTE",
    FIVE_MINUTES = "FIVE_MINUTES",
    FIFTEEN_MINUTES = "FIFTEEN_MINUTES",
    THIRTY_MINUTES = "THIRTY_MINUTES",
    ONE_HOUR = "ONE_HOUR",
    FOUR_HOURS = "FOUR_HOURS",
    ONE_DAY = "ONE_DAY",
    ONE_WEEK = "ONE_WEEK",
    ONE_MONTH = "ONE_MONTH"
}
export declare enum StreamingProtocol {
    UNISWAP_V2 = "UNISWAP_V2",
    UNISWAP_V3 = "UNISWAP_V3"
}
/**
 * OHLCV Pairs Stream Types
 */
export interface OHLCVPairsStreamParams {
    chain_name: StreamingChain;
    pair_addresses: string[];
    interval: StreamingInterval;
    timeframe: StreamingTimeframe;
    limit?: number;
}
export interface OHLCVPairsStreamResponse {
    chain_name: StreamingChain;
    pair_address: string;
    interval: StreamingInterval;
    timeframe: StreamingTimeframe;
    timestamp: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    price_usd: number;
    volume_usd: number;
    base_token: ContractMetadata;
    quote_token: ContractMetadata;
}
/**
 * OHLCV Tokens Stream Types
 */
export interface OHLCVTokensStreamParams {
    chain_name: StreamingChain;
    token_addresses: string[];
    interval: StreamingInterval;
    timeframe: StreamingTimeframe;
    limit?: number;
}
export interface OHLCVTokensStreamResponse {
    chain_name: StreamingChain;
    pair_address: string;
    interval: StreamingInterval;
    timeframe: StreamingTimeframe;
    timestamp: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    volume_usd: number;
    quote_rate: number;
    quote_rate_usd: number;
    base_token: ContractMetadata;
    quote_token: ContractMetadata;
}
/**
 * New DEX Pairs Stream Types
 */
export interface NewPairsStreamParams {
    chain_name: StreamingChain;
    protocols: StreamingProtocol[];
}
export interface PriceMetrics {
    last_5m: number;
    last_1hr: number;
    last_6hr: number;
    last_24hr: number;
}
export interface SwapMetrics {
    last_5m: number;
    last_1hr: number;
    last_6hr: number;
    last_24hr: number;
}
export interface NewPairsStreamResponse {
    chain_name: string;
    protocol: string;
    protocol_version: string;
    pair_address: string;
    deployer_address: string;
    tx_hash: string;
    block_signed_at: string;
    liquidity: number;
    supply: number;
    market_cap: number;
    event_name: string;
    quote_rate: number;
    quote_rate_usd: number;
    base_token_metadata: ContractMetadata;
    quote_token_metadata: ContractMetadata;
    pair_metadata: ContractMetadata;
    prices: PriceMetrics;
    swaps: SwapMetrics;
}
/**
 * Token Balances Stream Types
 */
export interface TokenBalancesStreamParams {
    chain_name: StreamingChain;
    wallet_address: string;
}
export interface TokenBalanceItem {
    balance: string;
    balance_pretty: number;
    quote_rate_usd: number;
    quote_usd: number;
    metadata: ContractMetadata;
    is_native: boolean;
}
export interface TokenBalancesStreamResponse {
    wallet_address: string;
    chain_name: string;
    last_block: number;
    items: TokenBalanceItem[];
}
/**
 * Wallet Activity Stream Types
 */
export interface WalletActivityStreamParams {
    chain_name: StreamingChain;
    wallet_addresses: string[];
}
export interface WalletActivityLogItem {
    emitter_address: string;
    log_offset: number;
    data: string;
    topics: string[];
}
export interface WalletActivityStreamResponse {
    tx_hash: string;
    from_address: string;
    to_address: string;
    value: number;
    chain_name: string;
    block_signed_at: string;
    block_height: number;
    block_hash: string;
    miner_address: string;
    gas_used: number;
    tx_offset: number;
    successful: boolean;
    decoded_type: string;
    decoded_details?: object;
    logs: WalletActivityLogItem[];
}
/**
 * Streaming service configuration
 */
export interface StreamingServiceConfig {
    shouldRetry?: (retries: number) => boolean;
    maxReconnectAttempts?: number;
    onConnecting?: () => void;
    onOpened?: () => void;
    onClosed?: () => void;
    onError?: (error: any) => void;
}
/**
 * Stream subscription options
 */
export interface StreamSubscriptionOptions<T = Array<object>> {
    next: (payload: T) => void;
    error?: (error: any) => void;
    complete?: () => void;
}
/**
 * Unsubscribe function type
 */
export type UnsubscribeFunction = () => void;
