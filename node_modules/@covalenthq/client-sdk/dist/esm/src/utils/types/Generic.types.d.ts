export declare enum ChainName {
    ETH_MAINNET = "eth-mainnet",
    ETH_SEPOLIA = "eth-sepolia",
    ETH_HOLESKY = "eth-holesky",
    MATIC_MAINNET = "matic-mainnet",
    AVALANCHE_MAINNET = "avalanche-mainnet",
    AVALANCHE_TESTNET = "avalanche-testnet",
    BSC_MAINNET = "bsc-mainnet",
    BSC_TESTNET = "bsc-testnet",
    MOONBEAM_MAINNET = "moonbeam-mainnet",
    MOONBEAM_MOONBASE_ALPHA = "moonbeam-moonbase-alpha",
    MOONBEAM_MOONRIVER = "moonbeam-moonriver",
    RSK_MAINNET = "rsk-mainnet",
    RSK_TESTNET = "rsk-testnet",
    ARBITRUM_MAINNET = "arbitrum-mainnet",
    ARBITRUM_NOVA_MAINNET = "arbitrum-nova-mainnet",
    ARBITRUM_SEPOLIA = "arbitrum-sepolia",
    FANTOM_MAINNET = "fantom-mainnet",
    FANTOM_TESTNET = "fantom-testnet",
    PALM_MAINNET = "palm-mainnet",
    PALM_TESTNET = "palm-testnet",
    SOLANA_MAINNET = "solana-mainnet",
    BTC_MAINNET = "btc-mainnet",
    AXIE_MAINNET = "axie-mainnet",
    OPTIMISM_MAINNET = "optimism-mainnet",
    OPTIMISM_SEPOLIA = "optimism-sepolia",
    CRONOS_MAINNET = "cronos-mainnet",
    CRONOS_TESTNET = "cronos-testnet",
    CRONOS_ZKEVM_TESTNET = "cronos-zkevm-testnet",
    CRONOS_ZKEVM_MAINNET = "cronos-zkevm-mainnet",
    AURORA_MAINNET = "aurora-mainnet",
    AURORA_TESTNET = "aurora-testnet",
    EMERALD_PARATIME_MAINNET = "emerald-paratime-mainnet",
    DEFI_KINGDOMS_MAINNET = "defi-kingdoms-mainnet",
    DEFI_KINGDOMS_TESTNET = "defi-kingdoms-testnet",
    BOBA_MAINNET = "boba-mainnet",
    BOBA_BNB_MAINNET = "boba-bnb-mainnet",
    BOBA_BNB_TESTNET = "boba-bnb-testnet",
    SCROLL_SEPOLIA_TESTNET = "scroll-sepolia-testnet",
    METIS_MAINNET = "metis-mainnet",
    AVALANCHE_DEXALOT_MAINNET = "avalanche-dexalot-mainnet",
    AVALANCHE_DEXALOT_TESTNET = "avalanche-dexalot-testnet",
    AVALANCHE_SHRAPNEL_MAINNET = "avalanche-shrapnel-mainnet",
    AVALANCHE_NUMBERS = "avalanche-numbers",
    AVALANCHE_XANACHAIN = "avalanche-xanachain",
    AVALANCHE_STEP_NETWORK = "avalanche-step-network",
    AVALANCHE_SHRAPNEL_TESTNET = "avalanche-shrapnel-testnet",
    AVALANCHE_BEAM_TESTNET = "avalanche-beam-testnet",
    AVALANCHE_BLITZ_TESTNET = "avalanche-blitz-testnet",
    AVALANCHE_UPTN = "avalanche-uptn",
    AVALANCHE_BEAM_MAINNET = "avalanche-beam-mainnet",
    AVALANCHE_MIRAI_TESTNET = "avalanche-mirai-testnet",
    BERACHAIN_MAINNET = "berachain-mainnet",
    UNICHAIN_MAINNET = "unichain-mainnet",
    CANTO_MAINNET = "canto-mainnet",
    FLARENETWORKS_FLARE_MAINNET = "flarenetworks-flare-mainnet",
    FLARENETWORKS_FLARE_TESTNET = "flarenetworks-flare-testnet",
    POLYGON_ZKEVM_MAINNET = "polygon-zkevm-mainnet",
    LINEA_MAINNET = "linea-mainnet",
    LINEA_GOERLI_TESTNET = "linea-goerli-testnet",
    LINEA_SEPOLIA_TESTNET = "linea-sepolia-testnet",
    POLYGON_ZKEVM_TESTNET = "polygon-zkevm-testnet",
    POLYGON_AMOY_TESTNET = "polygon-amoy-testnet",
    MANTLE_MAINNET = "mantle-mainnet",
    MANTLE_SEPOLIA_TESTNET = "mantle-sepolia-testnet",
    POLYGON_ZKEVM_CARDONA_TESTNET = "polygon-zkevm-cardona-testnet",
    BASE_MAINNET = "base-mainnet",
    BASE_SEPOLIA_TESTNET = "base-sepolia-testnet",
    SX_MAINNET = "sx-mainnet",
    OASIS_SAPPHIRE_MAINNET = "oasis-sapphire-mainnet",
    SYNDR_TESTNET = "syndr-testnet",
    OASIS_SAPPHIRE_TESTNET = "oasis-sapphire-testnet",
    CELO_MAINNET = "celo-mainnet",
    X1_MAINNET = "x1-mainnet",
    HORIZEN_EON_MAINNET = "horizen-eon-mainnet",
    HORIZEN_GOBI_TESTNET = "horizen-gobi-testnet",
    FRAXTAL_MAINNET = "fraxtal-mainnet",
    APECHAIN_TESTNET = "apechain-testnet",
    BERACHAIN_TESTNET = "berachain-testnet",
    REDSTONE_MAINNET = "redstone-mainnet",
    SEI_MAINNET = "sei-mainnet",
    APECHAIN_MAINNET = "apechain-mainnet",
    UNICHAIN_SEPOLIA_TESTNET = "unichain-sepolia-testnet",
    WORLD_MAINNET = "world-mainnet",
    WORLD_SEPOLIA_TESTNET = "world-sepolia-testnet",
    LENS_SEPOLIA_TESTNET = "lens-sepolia-testnet",
    INK_SEPOLIA_TESTNET = "ink-sepolia-testnet",
    INK_MAINNET = "ink-mainnet",
    AVALANCHE_MELD_TESTNET = "avalanche-meld-testnet",
    AVALANCHE_MELD_MAINNET = "avalanche-meld-mainnet",
    GUNZILLA_TESTNET = "gunzilla-testnet",
    ZORA_MAINNET = "zora-mainnet",
    ZORA_SEPOLIA_TESTNET = "zora-sepolia-testnet",
    ZKSYNC_MAINNET = "zksync-mainnet",
    ZKSYNC_SEPOLIA_TESTNET = "zksync-sepolia-testnet",
    BNB_OPBNB_TESTNET = "bnb-opbnb-testnet",
    BNB_OPBNB_MAINNET = "bnb-opbnb-mainnet",
    ZETACHAIN_TESTNET = "zetachain-testnet",
    ZETACHAIN_MAINNET = "zetachain-mainnet",
    KINTO_TESTNET = "kinto-testnet",
    MANTA_SEPOLIA_TESTNET = "manta-sepolia-testnet",
    ROLLUX_MAINNET = "rollux-mainnet",
    GNOSIS_MAINNET = "gnosis-mainnet",
    GNOSIS_TESTNET = "gnosis-testnet",
    VICTION_MAINNET = "viction-mainnet",
    VICTION_TESTNET = "viction-testnet",
    TAIKO_HEKLA_TESTNET = "taiko-hekla-testnet",
    TAIKO_MAINNET = "taiko-mainnet",
    MERLIN_MAINNET = "merlin-mainnet",
    MERLIN_TESTNET = "merlin-testnet",
    MOVEMENT_MEVM_TESTNET = "movement-mevm-testnet",
    BLAST_MAINNET = "blast-mainnet",
    SCROLL_MAINNET = "scroll-mainnet"
}
export declare enum ChainID {
    ETH_MAINNET = 1,
    ETH_SEPOLIA = 11155111,
    ETH_HOLESKY = 17000,
    MATIC_MAINNET = 137,
    AVALANCHE_MAINNET = 43114,
    AVALANCHE_TESTNET = 43113,
    BSC_MAINNET = 56,
    BSC_TESTNET = 97,
    MOONBEAM_MAINNET = 1284,
    MOONBEAM_MOONBASE_ALPHA = 1287,
    MOONBEAM_MOONRIVER = 1285,
    RSK_MAINNET = 30,
    RSK_TESTNET = 31,
    ARBITRUM_MAINNET = 42161,
    ARBITRUM_NOVA_MAINNET = 42170,
    ARBITRUM_SEPOLIA = 421614,
    FANTOM_MAINNET = 250,
    FANTOM_TESTNET = 4002,
    PALM_MAINNET = 11297108109,
    PALM_TESTNET = 11297108099,
    BTC_MAINNET = 20090103,
    SOLANA_MAINNET = 1399811149,
    AXIE_MAINNET = 2020,
    OPTIMISM_MAINNET = 10,
    OPTIMISM_SEPOLIA = 11155420,
    CRONOS_MAINNET = 25,
    CRONOS_TESTNET = 338,
    CRONOS_ZKEVM_TESTNET = 282,
    CRONOS_ZKEVM_MAINNET = 388,
    AURORA_MAINNET = 1313161554,
    AURORA_TESTNET = 1313161555,
    EMERALD_PARATIME_MAINNET = 42262,
    DEFI_KINGDOMS_MAINNET = 53935,
    DEFI_KINGDOMS_TESTNET = 335,
    BOBA_MAINNET = 288,
    BOBA_BNB_MAINNET = 56288,
    BOBA_BNB_TESTNET = 9728,
    SCROLL_SEPOLIA_TESTNET = 534351,
    METIS_MAINNET = 1088,
    AVALANCHE_DEXALOT_MAINNET = 432204,
    AVALANCHE_DEXALOT_TESTNET = 432201,
    AVALANCHE_SHRAPNEL_MAINNET = 2044,
    AVALANCHE_NUMBERS = 10507,
    AVALANCHE_XANACHAIN = 8888,
    AVALANCHE_STEP_NETWORK = 1234,
    AVALANCHE_SHRAPNEL_TESTNET = 2038,
    AVALANCHE_BEAM_TESTNET = 13337,
    AVALANCHE_BLITZ_TESTNET = 1343,
    AVALANCHE_UPTN = 6119,
    AVALANCHE_BEAM_MAINNET = 4337,
    AVALANCHE_MIRAI_TESTNET = 2195,
    BERACHAIN_MAINNET = 80094,
    UNICHAIN_MAINNET = 130,
    CANTO_MAINNET = 7700,
    FLARENETWORKS_FLARE_MAINNET = 14,
    FLARENETWORKS_FLARE_TESTNET = 114,
    POLYGON_ZKEVM_MAINNET = 1101,
    LINEA_MAINNET = 59144,
    LINEA_GOERLI_TESTNET = 59140,
    LINEA_SEPOLIA_TESTNET = 59141,
    POLYGON_ZKEVM_TESTNET = 1422,
    POLYGON_AMOY_TESTNET = 80002,
    MANTLE_MAINNET = 5000,
    MANTLE_SEPOLIA_TESTNET = 5003,
    POLYGON_ZKEVM_CARDONA_TESTNET = 2442,
    BASE_MAINNET = 8453,
    BASE_SEPOLIA_TESTNET = 84532,
    SX_MAINNET = 416,
    OASIS_SAPPHIRE_MAINNET = 23294,
    SYNDR_TESTNET = 412346,
    OASIS_SAPPHIRE_TESTNET = 23295,
    CELO_MAINNET = 42220,
    X1_MAINNET = 196,
    HORIZEN_EON_MAINNET = 7332,
    HORIZEN_GOBI_TESTNET = 1663,
    FRAXTAL_MAINNET = 252,
    APECHAIN_TESTNET = 1798,
    BERACHAIN_TESTNET = 80084,
    REDSTONE_MAINNET = 690,
    SEI_MAINNET = 1329,
    APECHAIN_MAINNET = 33139,
    UNICHAIN_SEPOLIA_TESTNET = 1301,
    WORLD_MAINNET = 480,
    WORLD_SEPOLIA_TESTNET = 4801,
    LENS_SEPOLIA_TESTNET = 37111,
    INK_SEPOLIA_TESTNET = 763373,
    INK_MAINNET = 57073,
    AVALANCHE_MELD_TESTNET = 222000222,
    AVALANCHE_MELD_MAINNET = 333000333,
    GUNZILLA_TESTNET = 49321,
    ZORA_MAINNET = 7777777,
    ZORA_SEPOLIA_TESTNET = 999999999,
    ZKSYNC_MAINNET = 324,
    ZKSYNC_SEPOLIA_TESTNET = 300,
    BNB_OPBNB_TESTNET = 5611,
    BNB_OPBNB_MAINNET = 204,
    ZETACHAIN_TESTNET = 7001,
    ZETACHAIN_MAINNET = 7000,
    KINTO_TESTNET = 42888,
    MANTA_SEPOLIA_TESTNET = 3441006,
    ROLLUX_MAINNET = 570,
    GNOSIS_MAINNET = 100,
    GNOSIS_TESTNET = 10200,
    VICTION_MAINNET = 88,
    VICTION_TESTNET = 89,
    TAIKO_HEKLA_TESTNET = 167009,
    TAIKO_MAINNET = 167000,
    MERLIN_MAINNET = 4200,
    MERLIN_TESTNET = 686868,
    MOVEMENT_MEVM_TESTNET = 336,
    BLAST_MAINNET = 81457,
    SCROLL_MAINNET = 534352
}
export type Chain = ChainID | ChainName | `${ChainName}` | `${ChainID}`;
export type Source = "Ponder" | "GoldRush" | "Viem";
export type Quote = "USD" | "CAD" | "EUR" | "SGD" | "INR" | "JPY" | "VND" | "CNY" | "KRW" | "RUB" | "TRY" | "NGN" | "ARS" | "AUD" | "CHF" | "GBP";
export type CryptocurrencyQuote = "ETH" | "BTC";
export type ChainLabel = "Foundational" | "Frontier" | "Community";
export interface Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
}
export interface PaginationLinks {
    /** * URL link to the next page. */
    prev: string;
    /** * URL link to the previous page. */
    next: string;
}
export interface NftCollectionAttribute {
    trait_type: string;
    value: string;
}
export type NftData = Nullable<{
    /** * The token's id. */
    token_id: bigint;
    token_url: string;
    /** * The original minter. */
    original_owner: string;
    /** * The current holder of this NFT. */
    current_owner: string;
    external_data: NftExternalData;
    /** * If `true`, the asset data is available from the Covalent CDN. */
    asset_cached: boolean;
    /** * If `true`, the image data is available from the Covalent CDN. */
    image_cached: boolean;
}>;
export interface NftExternalData {
    name: string;
    description: string;
    asset_url: string;
    asset_file_extension: string;
    asset_mime_type: string;
    asset_size_bytes: string;
    image: string;
    image_256: string;
    image_512: string;
    image_1024: string;
    animation_url: string;
    external_url: string;
    attributes: NftCollectionAttribute[];
    thumbnails: NFTThumbnails;
}
export interface NFTThumbnails {
    image256: string;
    image512: string;
    image1024: string;
    image_opengraph_url: string;
    thumbhash: string;
}
export interface DecodedItem {
    name: string;
    signature: string;
    params: Param[];
}
export interface Param {
    name: string;
    type: string;
    indexed: boolean;
    decoded: boolean;
    value: string;
}
export type LogEvent = Nullable<{
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string[];
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The address of the deployed UniswapV2 like factory contract for this DEX. */
    sender_factory_address: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
}>;
export interface ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
}
export interface Explorer {
    /** * The name of the explorer. */
    label: string;
    /** * The URL of the explorer. */
    url: string;
}
export interface LogoUrls {
    /** * The token logo URL. */
    token_logo_url: string;
    /** * The protocol logo URL. */
    protocol_logo_url: string;
    /** * The chain logo URL. */
    chain_logo_url: string;
}
export type GoldRushResponse<T> = {
    data: T;
    error: false | null;
    error_code: null;
    error_message: null;
} | {
    data: null;
    error: true;
    error_code: number;
    error_message: string;
};
export interface GoldRushClientSettings {
    /** * Toggle to analyze the execution of each api request. */
    debug?: boolean;
    /** * The number of concurrent requests allowed. */
    threadCount?: number;
    /** Toggle to turn on and off retry logic */
    enableRetry?: boolean;
    /** Set the retry logic count */
    maxRetries?: number;
    /** Set the retry delay in ms */
    retryDelay?: number;
    /** Set the source of the usage */
    source?: Source | string;
}
export type Nullable<T> = {
    [P in keyof T]: T[P] | null;
};
