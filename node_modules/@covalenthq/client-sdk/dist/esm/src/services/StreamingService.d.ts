import { type NewPairsStreamParams, type NewPairsStreamResponse, type OHLCVPairsStreamParams, type OHLCVPairsStreamResponse, type OHLCVTokensStreamParams, type OHLCVTokensStreamResponse, type StreamingServiceConfig, type StreamSubscriptionOptions, type TokenBalancesStreamParams, type TokenBalancesStreamResponse, type UnsubscribeFunction, type WalletActivityStreamParams, type WalletActivityStreamResponse } from "../utils/types/StreamingService.types";
import { type Client } from "graphql-ws";
/**
 * Streaming API Service
 *
 */
export declare class StreamingService {
    private defaultConfig;
    constructor(apiKey: string, config?: StreamingServiceConfig);
    /**
     * Initialize the streaming connection
     */
    getClient(): Client;
    /**
     * Disconnect from the streaming service
     */
    disconnect(): Promise<void>;
    /**
     * Check if the client is connected
     */
    get isConnected(): boolean;
    /**
     * Subscribe to a custom GraphQL subscription
     * This allows for advanced usage and future extensibility
     *
     * @param query - GraphQL subscription query
     * @param variables - Query variables
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     */
    rawQuery<T = Array<object>>(query: string, variables: Record<string, unknown>, callbacks: StreamSubscriptionOptions<T>): UnsubscribeFunction;
    /**
     * Subscribe to OHLCV data for specific pairs
     *
     * @param params - Parameters for the OHLCV pairs stream
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     *
     * @example
     * ```typescript
     * const unsubscribe = streamingService.subscribeToOHLCVPairs(
     *   {
     *     chain_name: StreamingChain.BASE_MAINNET,
     *     pair_addresses: ["0x9c087Eb773291e50CF6c6a90ef0F4500e349B903"],
     *     interval: StreamingInterval.ONE_MINUTE,
     *     timeframe: StreamingTimeframe.ONE_HOUR
     *   },
     *   {
     *     next: (data) => console.log("OHLCV Data:", data),
     *     error: (err) => console.error("Error:", err),
     *     complete: () => console.log("Stream completed")
     *   }
     * );
     * ```
     */
    subscribeToOHLCVPairs(params: OHLCVPairsStreamParams, callbacks: StreamSubscriptionOptions<OHLCVPairsStreamResponse[]>): UnsubscribeFunction;
    /**
     * Subscribe to OHLCV data for specific tokens
     *
     * @param params - Parameters for the OHLCV tokens stream
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     *
     * @example
     * ```typescript
     * const unsubscribe = streamingService.subscribeToOHLCVTokens(
     *   {
     *     chain_name: StreamingChain.BASE_MAINNET,
     *     token_addresses: ["0x4B6104755AfB5Da4581B81C552DA3A25608c73B8"],
     *     interval: StreamingInterval.ONE_MINUTE,
     *     timeframe: StreamingTimeframe.ONE_HOUR
     *   },
     *   {
     *     next: (data) => console.log("OHLCV Token Data:", data),
     *     error: (err) => console.error("Error:", err),
     *     complete: () => console.log("Stream completed")
     *   }
     * );
     * ```
     */
    subscribeToOHLCVTokens(params: OHLCVTokensStreamParams, callbacks: StreamSubscriptionOptions<OHLCVTokensStreamResponse[]>): UnsubscribeFunction;
    /**
     * Subscribe to new DEX pairs created on supported decentralized exchanges
     *
     * @param params - Parameters for the new pairs stream
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     *
     * @example
     * ```typescript
     * const unsubscribe = streamingService.subscribeToNewPairs(
     *   {
     *     chain_name: StreamingChain.BASE_MAINNET,
     *     protocols: [StreamingProtocol.UNISWAP_V2, StreamingProtocol.UNISWAP_V3]
     *   },
     *   {
     *     next: (data) => console.log("New Pairs:", data),
     *     error: (err) => console.error("Error:", err),
     *     complete: () => console.log("Stream completed")
     *   }
     * );
     * ```
     */
    subscribeToNewPairs(params: NewPairsStreamParams, callbacks: StreamSubscriptionOptions<NewPairsStreamResponse[]>): UnsubscribeFunction;
    /**
     * Subscribe to real-time token balance updates for a specific wallet address
     *
     * @param params - Parameters for the token balances stream
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     *
     * @example
     * ```typescript
     * const unsubscribe = streamingService.subscribeToTokenBalances(
     *   {
     *     chain_name: StreamingChain.BASE_MAINNET,
     *     wallet_address: "0x198ef79f1f515f02dfe9e3115ed9fc07183f02fc"
     *   },
     *   {
     *     next: (data) => console.log("Token Balances:", data),
     *     error: (err) => console.error("Error:", err),
     *     complete: () => console.log("Stream completed")
     *   }
     * );
     * ```
     */
    subscribeToTokenBalances(params: TokenBalancesStreamParams, callbacks: StreamSubscriptionOptions<TokenBalancesStreamResponse>): UnsubscribeFunction;
    /**
     * Subscribe to real-time wallet activity including transactions, token transfers, and smart contract interactions
     *
     * @param params - Parameters for the wallet activity stream
     * @param callbacks - Subscription callbacks
     * @returns Unsubscribe function
     *
     * @example
     * ```typescript
     * const unsubscribe = streamingService.subscribeToWalletActivity(
     *   {
     *     chain_name: StreamingChain.BASE_MAINNET,
     *     wallet_addresses: ["0x198ef79f1f515f02dfe9e3115ed9fc07183f02fc"]
     *   },
     *   {
     *     next: (data) => console.log("Wallet Activity:", data),
     *     error: (err) => console.error("Error:", err),
     *     complete: () => console.log("Stream completed")
     *   }
     * );
     * ```
     */
    subscribeToWalletActivity(params: WalletActivityStreamParams, callbacks: StreamSubscriptionOptions<WalletActivityStreamResponse[]>): UnsubscribeFunction;
}
